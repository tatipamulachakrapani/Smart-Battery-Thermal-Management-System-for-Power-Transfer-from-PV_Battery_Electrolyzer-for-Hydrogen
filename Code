#include <TimerOne.h>  
#include <Adafruit_INA219.h>
#include <SPI.h>
#include <Wire.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <U8x8lib.h>
#include "ChargerClasses.hpp"

#define PFET_PIN 9
#define ONE_WIRE_BUS 2
#define ONE_WIRE_BUS_AMB 3
#define INTERRUPT_PIN 4
#define PWM_INTERRUPT 6

Adafruit_INA219 ina219;
SimplePID voltagePID;
bool charging = true;
bool voltageLockout = false;  // For battery over-voltage protection
float t = 0, tn1 = 0, t_record = 0;

U8X8_SSD1306_128X64_NONAME_HW_I2C display(U8X8_PIN_NONE);

OneWire oneWire(ONE_WIRE_BUS), oneWireAmb(ONE_WIRE_BUS_AMB);
DallasTemperature tempSensor(&oneWire), tempSensorAmb(&oneWireAmb);

unsigned long lastDisplayUpdate = 0, lastBlinkTime = 0;
const unsigned long displayInterval = 1000;
bool overheatBlink = false;

void setup() {
  pinMode(A2, INPUT); pinMode(A3, INPUT);
  Serial.begin(9600);
  Serial.println("Charger setup started...");
  
  SPI.begin(); ina219.begin();
  Timer1.initialize(100); Timer1.pwm(PFET_PIN, 0);
  voltagePID.setParams(0, 0.2e-3, 0, 0, 1);
  charging = true;

  display.begin();
  display.setFont(u8x8_font_chroma48medium8_r);
  display.setPowerSave(0);

  tempSensor.begin();
  tempSensorAmb.begin();

  // Initial layout (static labels)
  display.setCursor(0, 0); display.print("BatI  :");
  display.setCursor(0, 1); display.print("BatV  :");
  display.setCursor(0, 2); display.print("Bat%  :");
  display.setCursor(0, 3); display.print("Sol.V :");
  display.setCursor(0, 4); display.print("BatT  :");
  display.setCursor(0, 5); display.print("AmbT  :");
  display.setCursor(0, 6); display.print("Stat  :");
}

void loop() {
  float tn = millis() / 1e3, dt = tn - tn1; tn1 = tn; t += dt;

  float iBatt = ina219.getCurrent_mA();

  // ‚úÖ Instant voltage readings
  float vRawA2 = analogRead(A2);
  float vRawA3 = analogRead(A3);
  float vSrc = (vRawA2 * (5.0 / 1023.0)) * 6.0 * 1.04;
  float vBatt = (vRawA3 * (5.0 / 1023.0)) * 6.0 * 1.032;

  // Request and read temperatures
  tempSensor.requestTemperatures();
  tempSensorAmb.requestTemperatures();
  float tempC = tempSensor.getTempCByIndex(0);
  float tempAC = tempSensorAmb.getTempCByIndex(0);

  // üå°Ô∏è Over-temperature protection with hysteresis
  if (tempC > 40.5) {
    charging = false;
  } else if (tempC < 38.0) {
    charging = true;
  }

  // üîã Over-voltage protection with hysteresis
  if (vBatt > 12.94) {
    voltageLockout = true;
  } else if (vBatt < 12.54) {
    voltageLockout = false;
  }
  float maxCurrent = 500;
  int battPercent = constrain((vBatt - 11.54) / (12.54 - 11.54) * 100, 0, 100);

  if (battPercent < 50) maxCurrent = 500;
  else if (battPercent < 80) maxCurrent = 350;
  else if (battPercent < 90) maxCurrent = 200;
  else maxCurrent = 100;

  float u = voltagePID.evaluate(iBatt, 500, vSrc);
  float duty = (charging && !voltageLockout) ? u : 0;

  // Debug info
  Serial.print("iBatt: "); Serial.print(iBatt);
  Serial.print(" mA, vSrc: "); Serial.print(vSrc);
  Serial.print(" V, vBatt: "); Serial.print(vBatt);
  Serial.print(" V, tempC: "); Serial.print(tempC);
  Serial.print(" C, tempAC: "); Serial.print(tempAC);
  Serial.print(" C, Duty: "); Serial.println(duty * 100);

  if (millis() - lastDisplayUpdate >= displayInterval) {
    lastDisplayUpdate = millis();

    int battPercent = constrain((vBatt - 11.54) / (12.54 - 11.54) * 100, 0, 100);
    bool solar = (vSrc > 6.0);

    if (tempC > 40.5 && millis() - lastBlinkTime > 500) {
      overheatBlink = !overheatBlink;
      lastBlinkTime = millis();
    }

    display.setCursor(8, 0); display.print("       "); display.setCursor(8, 0); display.print((int)iBatt); display.print("mA");
    display.setCursor(8, 1); display.print("       "); display.setCursor(8, 1); display.print(vBatt, 1); display.print("V");
    display.setCursor(8, 2); display.print("       "); display.setCursor(8, 2); display.print(battPercent); display.print("%");

    display.setCursor(8, 3); display.print("       "); display.setCursor(8, 3); display.print(vSrc, 1); display.print("V");
    display.print(solar ? " \x18" : " X");

    display.setCursor(8, 4);
    if (tempC > 40.5 && overheatBlink) display.print("     ");
    else {
      display.print("       "); display.setCursor(8, 4);
      display.print(tempC, 1); display.print((char)248); display.print("C");
    }

    display.setCursor(8, 5); display.print("       "); display.setCursor(8, 5);
    display.print(tempAC, 1); display.print((char)248); display.print("C");

    // ‚ö†Ô∏è Display charging status
    display.setCursor(8, 6); display.print("       "); display.setCursor(8, 6);
    if (!charging) display.print("HOT ");
    else if (voltageLockout) display.print("FULL");
    else display.print("CHRG");
  }

  Timer1.pwm(PFET_PIN, duty * 1023);  // Apply PWM
}
